Hugo Giao Hàng
Hugo Giao Hàng

Hugo đang làm việc cho công ty Samsung, tuy mức lương ở Samsung không hề nhỏ nhưng vì Hugo là lao động duy nhất trong nhà, vợ của Hugo mới sinh em bé. Hugo muốn kiếm them thu nhập để có thể có thêm tiền sữa, bỉm cho con. Hugo quyết định nhận giao bánh pizza ngoài giờ làm. Mỗi ngày, sau khi tan ca Hugo sẽ nhận N chiếc bánh pizza để giao tới N địa điểm khác nhau sau đó trở về nhà. Tuy nhiên do giá xăng dầu đang leo thang, Hugo cần phải giảm tối đang lượng xăng phải tiêu thụ, vì vậy Hugo muốn tính toán xem quãng đường đi giao bánh pizza từ công ty sau đó về nhà là ngắn nhất.

Hãy giúp Hugo với nhé.

Đầu vào

T test case

Dòng đầu tiên chưa 4 số Sx, Sy, Hx, Hy tương ứng là vị trí của công ty và nhà của Hugo trên hệ trục tọa độ Oxy

Dòng tiếp theo bao gồm số N và N cặp số liên tiếp tương ứng là tọa độ các điểm mà Hugo cần giao pizza.

N<=10

Cách tính khoảng cách giữa 2 điểm x1,y1 x2,y2    D = |x1-x2|+|y1-y2|

 

Đầu ra

In ra quãng đường ngắn nhất Hugo di chuyển từ công ty để giao bánh sau đó trở về nhà.

 

10

57 61 50 61

5 86 53 4 104 27 3 55 34 69 0

96 47 60 28

5 0 6 43 84 84 35 44 57 95 50

48 32 67 42

5 53 51 92 1 48 19 8 3 82 37

97 28 66 41

5 93 72 9 79 46 31 12 66 54 11

38 62 93 86

5 87 83 40 83 83 26 98 11 74 103

23 42 71 16

5 12 76 47 74 24 5 88 82 45 85

96 85 14 6

5 86 91 104 60 72 35 59 22 58 39

99 49 68 1

5 48 80 96 101 56 88 75 56 25 81

51 14 75 51

5 29 62 103 15 75 84 67 94 96 57

87 39 57 77

5 105 85 31 40 1 88 83 89 29 18

 

Case #1 393

Case #2 323

Case #3 267

Case #4 294

Case #5 281

Case #6 300

Case #7 219

Case #8 283

Case #9 295

Case #10 344
//code
#include<iostream>
using namespace std;
int stx, sty, endx, endy;
int point[20][4], N;
int khoangc[20][20];
int visited[20];
int kc = 9999;
int order[20];

int tinhkc(int xfrom, int yfrom, int xto, int yto){
	int tempx;
	if (xfrom - xto < 0)
	{
		tempx = (xfrom - xto)*(-1);
	}else
	{
		tempx = xfrom - xto;
	}
	int tempy;
	if (yfrom - yto < 0)
	{
		tempy = (yfrom - yto)*(-1);
	}else
	{
		tempy = yfrom - yto;
	}

	return tempx+tempy;
}

void backtrack(int i, int pre, int tong){

	if (i == N)
	{
		
		if (kc > tong + khoangc[pre][N+1])
		{
			kc  = tong+khoangc[pre][N+1];
		}
	}
	for (int j = 1; j <= N; j++)
	{
		if (visited[j] != 1)
		{
			if (tong > kc)
			{
				return;
			}
			visited[j] =1;
			order[i] = j;
			backtrack(i+1,j, tong += khoangc[pre][i]);
			visited[j] = 0;
		}
	}
}

int main(){
	freopen("input.txt","r",stdin);
	int T;
	cin >> T;
	for (int tc = 1; tc <= T; tc++)
	{
		kc = 9999;
		cin >> stx >> sty >> endx>> endy;
		cin >>  N;
		point[0][0] = stx;
		point[0][1] = sty;
		for (int i = 1; i <= N; i++)
		{
			cin >> point[i][0] >> point[i][1];
		}
		point[N+1][0] = endx;
		point[N+1][1] = endy;
		for (int i = 0; i <= N+1; i++)
		{
			for (int j = i+1; j <= N+1; j++)
			{
				int temp = tinhkc(point[i][0], point[i][1], point[j][0], point[j][1]);
				khoangc[i][j] = temp;
				khoangc[j][i] = temp;
			}
		}
		visited[0] = 1;
		visited[N+1] = 1;
		backtrack(1, 0, 0);
		cout << kc << endl;
	}
	return 0;
}
