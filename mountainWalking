Mountain Walking
Cho một bản đồ kích thước NxN (2 <= N <= 100), mỗi ô mang giá trị là độ cao của ô đó (0 <= độ cao <= 110). Bác John và bò Bessie đang ở ô trên trái (dòng 1, cột 1) và muốn đi đến cabin (dòng N, cột N). Họ có thể đi sang phải, trái, lên trên và xuống dưới nhưng không thể đi theo đường chéo. Hãy giúp bác John và bò Bessie tìm đường đi sao cho chênh lệch giữa điểm cao nhất và thấp nhất trên đường đi là nhỏ nhất.

 

Input

Dòng 1: Số test case

Dòng 2: N

N dòng tiếp theo chứa N số nguyên, mỗi số cho biết cao độ của một ô.

 

Output

In ra #test case và một số nguyên là chênh lệch độ cao nhỏ nhất.

 

Sample

 

Input

5

5

1 1 3 6 8

1 2 2 5 5

4 4 0 3 3

8 0 2 3 4

4 3 0 2 1

5

99 85 38 22 55

89 28 33 3 65

99 20 14 67 90

36 27 28 77 31

50 45 12 9 14

2

92 83

19 91

5

61 49 32 34 28

100 65 0 10 89

34 99 40 86 4

10 97 49 21 30

95 33 79 51 65

2

17 60

94 27

 

Output

#1 2

#2 85

#3 9

#4 50

#5 43


#include<iostream>

using namespace std;

int N;
int a[101][101];
int visit[101][101];
int vimax[101][101];
int vimin[101][101];
int dx[4] = {-1,0,1,0};
int dy[4] = {0,1,0,-1};
int qx[1000000];
int qy[1000000];
int dau, cuoi;
int lechMax, gtmax, gtmin;

int tru(int a, int b)
{
	return a > b ? (a-b) : (b-a);
}

int BFS()
{
	int i, j, x, y, xt, yt, v, left, right;
	int setMa, setMi;
	if(a[1][1] > a[N][N])
	{
		setMa = a[1][1];
		setMi = a[N][N];
	}
	else
	{
		setMi = a[1][1];
		setMa = a[N][N];
	}

	for(v=setMa - setMi; v<=gtmax - gtmin; v++)
	{
		left = setMa-v;
		if(left<0)
		{
			left = 0;
		}
		for(; left <= setMi; left++)
		{
			right = v + left;
			
			
			for(i=1; i<=N; i++)
				for(j=1; j<=N; j++)
				{
					visit[i][j] = 0; 
				}
				dau = cuoi = -1;
				qx[++cuoi] = 1;
				qy[cuoi] = 1;
				visit[1][1] = 1;
				while(dau<cuoi)
				{
					x = qx[++dau];
					y = qy[dau];
					for(i=0; i<4; i++)
					{
						xt = x + dx[i];
						yt = y + dy[i];

						if(xt > 0 && yt > 0 && xt <= N && yt <= N)
							if(visit[xt][yt] == 0)
							{
								if(a[xt][yt] > right || a[xt][yt] < left)
								{
								}
								else
								{
									visit[xt][yt] = 1;
									qx[++cuoi] = xt;
									qy[cuoi] = yt;
									if(xt == N && yt == N)
										return v;
								}
							}
					}
				}
		}
	}
}

int main()
{
		//freopen("out.txt", "w", stdout);
	int tc, T;
	int i, j;
	cin >> T;
	for(tc = 1; tc<=T; tc++)
	{
		cin >> N;
		gtmax = 0; gtmin = 110;
		for(i=1; i<=N; i++)
			for(j=1; j<=N; j++)
			{
				cin >>  a[i][j];
				gtmax = gtmax > a[i][j] ? gtmax : a[i][j];
				gtmin = gtmin < a[i][j] ? gtmin : a[i][j];
			}
			cout << "#" << tc << " " << BFS() << endl;

	}
}
